-------------------------------------------------------------
-- Overtune v0.2 by Cas Marrav (for Renoise 2.8)           --
-------------------------------------------------------------

renoise.tool():add_menu_entry {
  name = "Main Menu:Tools:Overtune...",
  invoke = function()
    show_dialog()
  end
}

-------------------------------------------------------------
-- Main: show_dialog() function                            --
-------------------------------------------------------------
function show_dialog()
  local vb = renoise.ViewBuilder()
  local CS = renoise.ViewBuilder.DEFAULT_CONTROL_SPACING
  local DDM = renoise.ViewBuilder.DEFAULT_DIALOG_MARGIN
  
  local vb_step1 = vb:textfield { value = "math.sin(x)", width = 300 }
  local vb_stepn = vb:textfield { value = "math.sin(N*x)/(2^(N-1))", width = 300 }
  --local vb_stepn = vb:textfield { value = "math.sin(N*x)/((N-1)*2)" }   -- bad saw
  local vb_steps = vb:slider { min = 1, max = 99, value = 3, width = 300 }

  --check for previous settings
  local ci = renoise.song().selected_instrument
  if (ci:sample(1).name == "Overtuned" and #ci.samples == 4) then
    -- try this!
    vb_step1.value = ci:sample(2).name
    vb_stepn.value = ci:sample(3).name
    vb_steps.value = 0+(ci:sample(4).name)
  end

  local vb_dialog =
    vb:horizontal_aligner {
      margin = DDM,
      spacing = CS,
      vb:column {
        vb:text { text = "Step 1:" },
        vb:text { text = "Step N:" },
        vb:text { text = "Step #:" },
      },
      vb:column {
        vb_step1,
        vb_stepn,
        vb_steps,
      },
    }
  local dialog_instance = renoise.app():show_custom_prompt("Overtune!",
                   vb_dialog,
                 {"Check the Tune!", "Cancel"})   -- TODO: make normal dialog with handlers, have a "Try the Sawce!" button
  if dialog_instance == "Check the Tune!" then
    render_overtune( vb_step1.value, vb_stepn.value, math.floor(vb_steps.value) )
  end
end

-------------------------------------------------------------
-- Main: render_overtune() function                        --
-------------------------------------------------------------
function render_overtune( step1, stepn, steps )
  local vb = renoise.ViewBuilder()
  local rs = renoise.song()
  local ci = rs.selected_instrument
  local sl = 1604
  --local sa = {}
  local sb
  local rk = 9    -- A-0 for crispness
  local formulastr = step1
  local formula
  local md = 0    -- max deviation from 0
  local continue = "OK"
  if (#ci.samples > 1 or ci.samples[1].sample_buffer.has_sample_data) then
    continue = renoise.app():show_custom_prompt( "Warning", vb:text { text = "Instrument will be replaced. Continue?" }, { "OK", "Cancel" } )
  end
  if ( continue == "OK" ) then
    --save the settings
    ci:clear()
    for i = 2, 4 do
      ci:insert_sample_at(i)
      sb = ci:sample(i).sample_buffer
      sb:create_sample_data( 44000, 32, 1, 1 )
    end
    ci:sample(1).name = "Overtuned"
    ci:sample(2).name = step1
    ci:sample(3).name = stepn
    ci:sample(4).name = tostring(steps)
    ci.name = "Overtuned"
    -- build formula strings
    for i = 2, steps do
      formulastr = formulastr .. "+" .. stepn:gsub("N", i)
    end
    formulastr = "("..formulastr..")/"..steps
    print (formulastr)
    -- build sawce source sample #1
    sb = ci.samples[1].sample_buffer
    sb:create_sample_data( 44000, 32, 1, sl )
    sb:prepare_sample_data_changes()
    for i = 1, sl do
      local x = i*2*math.pi / sl
      local s = formulastr:gsub("x",x)
      local y = loadstring("return ("..s..")")()
      if math.abs(y) > md then md = math.abs(y) end
      --if i < 5 then
        --print (x)
        --s = s:sub(1, s:len()-1)
        --print (s)
        --print ( loadstring("return ("..s..")") )
      --end
      sb:set_sample_data( 1, i, y )
    end
    if md < 0.5 then
      local pf = 1 / md
      for i = 1, sl do
        sb:set_sample_data(1, i, sb:sample_data(1, i) * pf)
      end
    end
    sb:finalize_sample_data_changes()
    ci.samples[1].loop_start = 1
    ci.samples[1].loop_end = sl
    -- do the mappings
    ci:delete_sample_mapping_at(1, 1)    -- note-on layer, index 1
    for i = 1, #ci.samples do
      ci:insert_sample_mapping(1, i, rk)
    end
  end
end
